* Webアプリケーションエンジニアのためのバッチ処理・設計ハンドブック

** はじめに
*** TODO まえがき

    バッチ処理というのはそれ単体で勉強しようとするとなかなかどこから勉強したらいいのかわからないことが現状です。
    エンジニアのスキルや経験がいわゆるWeb系と言われる、いざバッチ処理を実装しようとした時に基本的なノウハウを知らないまま書いてしまうのではないでしょうか。

    とかなんとか。

*** 本書の目的

    バッチ処理について暗黙知を持たない組織において、バッチ処理を開発することになったエンジニアの助けとなること。
    運用しやすく、可用性が高く、耐障害性に優れたバッチ処理の開発ノウハウを特定の言語・フレームワーク・実行エンジンに依存しないかたちで、体系的に身につけることを目的としています。

*** 対象読者

    Webアプリケーションについて開発経験があるが、バッチ処理について運用まで考慮した開発を行う自信が持てないエンジニアを対象としています。
    勉強しようにも学習リソースに到達できない、あるいはリソースが英語だったり学術的で難しいので実際問題として納期までにそれら文献の理解が困難な方も対象としています。
    つまり、過去の著者自身がメインターゲットとなります。

*** 注意

    著者は社会インフラ・金融・運輸・医療などの人々の生活・生死に強く関わるシステムを手掛けた経験は"ありません"。
    従って、そのようなミッションクリティカルな業務バッチ処理を開発する際に本書の内容を適用できるどうかわかりません。
    これらの分野のバッチ処理に本書の内容を適用すべきかどうかは開発者ご自身の判断でお願いします。
    
** バッチ処理とは

   バッチ処理の本書での定義や概要を書く

** 起動タイミング

   バッチ処理の起動タイミングについては大きく二つ種類があります。
   定時起動かトリガー起動です。

*** 定時起動

    バッチの定時起動は年〜秒の単位で周期的（サイクリック・cyclic）に行われるものを指します。
    秒単位の定時起動のバッチ処理というのも定義上はありえますが、なかなかお目にかかることはないでしょう。

    実現手法としては規模の小さい段階では Linux の cron や Windows のタスクスケジューラを使われることが多いです。

**** TODO 世の中のジョブスケジューラの一覧を書く？

**** 定時起動の呼び方

     組織によっていろいろな呼び方があるでしょうが組織内で呼び方を統一しておくと戸惑うことがありません。
     筆者が所属した組織では以下の呼び方をしていました。

     | 単位 | 呼び方          |
     |------+-----------------|
     | 年   | 年次バッチ      |
     | 月   | 月次バッチ      |
     | 週   | 週次バッチ      |
     | 日   | 日次バッチ      |
     | 時間 | 毎時バッチ      |
     | 分   | N分おきのバッチ |

     毎時の時に時次と呼ぶのも収まりが悪いし、毎次と書くと単位が抜ける…。
     という些細ながらも微妙な気持ちに配慮した呼称です。
     
**** 定時起動の注意点
     
***** 月次バッチは月初に、重要なものから

      月次バッチは月初に、業務的に重要なものから順にスケジューリングするようにしましょう。
      月末にバッチ処理を実行するのは31日、30日、28日、29日(うるう年)のいつ実行するのか考慮する必要が出てくるのでなるのでなるべく避けるようにしましょう。

***** 1日、0時、0分、キリのいい時間を避ける

      バッチを複数作っていると、月初や、0時、0分などキリのいい時間帯に複数のバッチが意図せずスケジューリングされてしまうことになりがちです。
      そして、同時に複数のバッチ処理を起動しようとしてバッチサーバーがダウンするというパンクするというお寒い状況に陥ることがままあります。
      同時実行するバッチが多いと障害発生した際の原因の切り分けなども困難になることが多いため、バッチそれぞれの重要度・緊急度を判断したうえで分散してスケジューリングしていくようにしましょう。

      高機能なジョブ実行サーバーでは、毎時、日次など周期を指定するとそれより下の単位は適度に分散してくれるものもあります。

***** MEMO
      
         - 定時起動
           - 毎時N分
           - 毎日N時
           - 毎週N曜日
           - 毎月N日
         - トリガー
           - WebUIの操作
           - WebAPIへのリクエスト
           - scpでファイルが置かれる
           - メッセージキュー


*** トリガー起動

    このあたりを詳説する
    - トリガー
      - WebUIの操作
      - WebAPIへのリクエスト
      - scpでファイルが置かれる
      - メッセージキュー

** 入力処理

   システム内部・外部のデータを特定期間・範囲でロードする。
   ロード元はいろいろあるけどだいたいこのあたりだろう。

   - RDBMS
   - CSVファイル
   - XML, JSONその他構造化ファイル
   - ログファイル
   - 画像ファイル
   - バイナリファイル
   - 外部Webサービス
   - SCPからファイル取得or受信
   - メッセージキュー
   
*** CSVファイル

    

*** ファイルの転送

    複数の環境や
    ファイルの転送には様々な方法があるが、逐次取り込みの場合は rsync 

** 加工・変換・集計処理

   ロードしたデータを処理していく。
   処理内容はいろいろあるけど大体このあたりの処理をする。

   - クリーニング・ベリファイ
   - 加工
   - 変換
   - 集計

** 出力処理

   さて、データを加工・集計しても、それをどこかに出力しないと意味がない。
   ので、出力する。出力先はまぁいろいろある。ここが外部へ影響を与える瞬間なので一番怖い。

   - RDBMSへ保存・更新
   - CSVへ保存
   - メール・メッセージを送る
   - 外部Webサービスに送信
   - 次のバッチを起動する


** 要整理

*** データの更新はギリギリまで避ける
    
*** 可能であれば冪等に実装する

*** 並列化可能なポイントを抑えておく

*** 時刻の記録

*** 処理対象範囲を引数で指定可能にする

*** ロックによる多重起動禁止

*** メンテナンスモードによる起動禁止

*** データの保持期限・削除基準の設定

*** デーモンの採用基準

*** 進捗状況を確認できるようにする

*** 異常データ、異常動作のアラート

*** Dry Runオプションの用意

*** リカバリー手順を用意し、リカバリー可能な実装にする

*** ワーキングディレクトリの扱い方

*** 開発・テスト時と本番時の環境差分を最小にしておく

*** アルゴリズム(計算効率)に関するケア

    O(n^2)の話。場合によってはnを細かく刻んだほうがいいはなし。

*** メモリ使用量(空間効率)に関するケア

    カーソルとかウインドウの話を書く

*** トランザクション範囲

    これから考える・辛い記憶を思い出す

*** エラー処理について

    こいつはつらいよ

*** 処理状況のステータス

    JSR読んで考える

*** 連携元遅延を考慮する

    連携元からCSVが届かない時どうするかっていうね

** メモ

   - ですます、である調をどうするか
     - 一旦ですます調ベース
   - クソみたいな逸話や喩え話を入れるか（入れたいけど読みたくない）
     - とりあえず気持よく書いてどんどん削ろう
   - どこまでバッチ処理の重厚サイドの話を書くか
     - JSRでいうJOB、STEP、CHUNK的なものを書くかどうか
     - 自分の学習状況にもよるけど、読者が胃もたれしないラインを見極めたい
   - クックブック・ハンドブック・パターンのようにトピックを並べる形式にするか、体系だてて並べるべきか。
   - 分散・クラウド的な話
     - そもそも自分の経験から外れるからナシ。せいぜい複数スレッド・プロセス・サーバーでの並列処理について書く程度。

** 参考資料

*** JSR-352

    PDFはここから
    https://jcp.org/en/jsr/detail?id=352

*** okachimachiorzさんの

    Asakusaでの設計・実装の方法についてのドキュメント
    http://d.hatena.ne.jp/okachimachiorz/20120121/1327146544

    バッチ設計と実装ガイド
    http://www.asakusafw.com/techinfo/methodology.html

*** wyukawaさんの

    バッチ処理、ジョブ管理について書いてみるAdd Starhaishi
    http://d.hatena.ne.jp/wyukawa/20150617/1434509706

    バッチ処理の実装方法
    http://d.hatena.ne.jp/wyukawa/20150925/1443166905

*** kawasimaさんの

    多い日も安心設計
    http://qiita.com/kawasima/items/ee863f23b4588b9792fb

    システムエンジニア Advent Calendar 2015
    http://qiita.com/advent-calendar/2015/se

*** コンポツさん

    はてぶ
    http://b.hatena.ne.jp/entry/mitomasan.hatenablog.com/entry/2016/02/17/232019
    http://b.hatena.ne.jp/entry/mitomasan.hatenablog.com/entry/2016/02/19/004516

*** qiita

    教科書に載っていないけど、よい設計。
    http://qiita.com/madilloar/items/67fb6ee0a64a5435bc28
    
*** 本を書くときの参考

    JavaScript Promiseの本
    http://azu.github.io/promises-book/
    技術書、それも売れるやつを書きたい人へ、編集者からのアドバイス
    http://tsuchinoko.dmmlabs.com/?p=2303
